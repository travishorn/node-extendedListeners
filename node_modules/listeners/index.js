/*
extendedListeners
-----------------

This snippet intercepts requests on an http server and
serves its own content.

Require this module and call the listen method, passing
the http server object. Then, add resources using the
addResource method, passing the url and the location of
the file to serve.

Any request's url that matches something in the
resource array will be responded to with the data in
the specified file. This is a simplified solution taken
from socket.io.
*/

var fs        = require('fs'),
    resources = [];

exports.listen = function (server) {
  var oldListeners = server.listeners('request');

  server.removeAllListeners('request');

  server.on('request', function (req, res) {
    for (var i = 0; i < resources.length; i++) {
      if (req.url == resources[i].request) {
        serveResource(resources[i].resource, res);
        return;
      }
    }

    for (i = 0, l = oldListeners.length; i < l; i++) {
      oldListeners[i].call(server, req, res);
    }
  });

  return this;
};

exports.addResource = function (options) {
  var request  = options.request,
      resource = options.resource;

  resources.push({ 'request': request, 'resource': resource });
};

function serveResource (resource, res) {
  fs.readFile(__dirname + '/resources/' + resource, function (err, data) {
    if (err) {
      res.writeHead(500);
      return res.end('Error loading resource.');
    }

    res.writeHead(200, { 'Content-Type': 'text/javascript' });
    res.end(data);
  });
}